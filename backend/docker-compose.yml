version: '3'

services:
  # frontend:
  #   build: ./micro_service_frontend/
  #   ports:
  #     - '80:80'
  #   networks:
  #     - archistack

  # tests:
  #   build:
  #     context: ./
  #     dockerfile: ./sonar_tests/Dockerfile
  #   volumes:
  #     - ./sonar_tests/data/card:/data/card
  #     - ./sonar_tests/data/inventory:/data/inventory
  #   networks:
  #     - archistack
  #   depends_on:
  #     - sonarqube

  # ! COUNTRY
  country:
    build:
      context: ./
      dockerfile: ./micro_service_country/Dockerfile
    ports:
      - '8082:8082'
    networks:
      - archistack

  # # ! USER INVENTORY COUNTRY
  proxyauth:
    build:
      context: ./
      dockerfile: ./micro_service_proxyauth/Dockerfile
    ports:
      - '8080:8080'
    networks:
      - archistack

  # ! INVENTORY
  user:
    build:
      context: ./
      dockerfile: ./micro_service_user/Dockerfile
    ports:
      - '8081:8081'
    networks:
      - archistack

  # ! USER COUNTRY
  game:
    build:
      context: ./
      dockerfile: ./micro_service_game/Dockerfile
    ports:
      - '8083:8083'
    networks:
      - archistack

  # sonarqube:
  #   image: sonarqube:lts
  #   depends_on:
  #     - db
  #   environment:
  #     SONAR_JDBC_URL: jdbc:postgresql://db:5432/sonar
  #     SONAR_JDBC_USERNAME: sonar
  #     SONAR_JDBC_PASSWORD: sonar
  #   volumes:
  #     - sonarqube_data:/opt/sonarqube/data
  #     - sonarqube_extensions:/opt/sonarqube/extensions
  #     - sonarqube_logs:/opt/sonarqube/logs
  #   ports:
  #     - "9000:9000"
  #   networks:
  #     - archistack

  # db:
  #   image: postgres:13
  #   environment:
  #     POSTGRES_USER: sonar
  #     POSTGRES_PASSWORD: sonar
  #     POSTGRES_DB: sonar
  #   volumes:
  #     - postgresql:/var/lib/postgresql
  #     - postgresql_data:/var/lib/postgresql/data
  #   ports:
  #     - '5432:5432'
  #   networks:
  #     - archistack

# volumes:
#   sonarqube_data:
#   sonarqube_extensions:
#   sonarqube_logs:
#   postgresql:
#   postgresql_data:

networks:
  archistack:
